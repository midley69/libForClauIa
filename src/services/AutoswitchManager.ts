// Gestionnaire d'autoswitch pour LiberTalk
import { supabase } from '../lib/supabase';

export interface AutoswitchSession {
  sessionId: string;
  countdownRemaining: number;
  isActive: boolean;
}

class AutoswitchManager {
  private static instance: AutoswitchManager;
  private currentSession: AutoswitchSession | null = null;
  private countdownInterval: NodeJS.Timeout | null = null;
  private checkInterval: NodeJS.Timeout | null = null;
  private onCountdownUpdate: ((seconds: number) => void) | null = null;
  private onAutoswitchComplete: ((newSessionId: string | null) => void) | null = null;

  static getInstance(): AutoswitchManager {
    if (!AutoswitchManager.instance) {
      AutoswitchManager.instance = new AutoswitchManager();
    }
    return AutoswitchManager.instance;
  }

  // Initialiser l'autoswitch pour une session
  initialize(
    onCountdownUpdate: (seconds: number) => void,
    onAutoswitchComplete: (newSessionId: string | null) => void
  ): void {
    this.onCountdownUpdate = onCountdownUpdate;
    this.onAutoswitchComplete = onAutoswitchComplete;
    
    console.log('üîÑ Gestionnaire d\'autoswitch initialis√©');
  }

  // D√©marrer la surveillance d'une session sp√©cifique
  startMonitoringSession(sessionId: string): void {
    if (!sessionId || sessionId.trim() === '') {
      console.error('‚ùå Session ID invalide pour l\'autoswitch');
      return;
    }

    this.currentSession = {
      sessionId: sessionId.trim(),
      countdownRemaining: 0,
      isActive: false
    };
    
    // V√©rifier p√©riodiquement les sessions en autoswitch
    this.startPeriodicCheck();
    
    console.log('üîÑ Gestionnaire d\'autoswitch initialis√© pour session:', sessionId);
  }

  // D√©marrer la v√©rification p√©riodique
  private startPeriodicCheck(): void {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
    }

    this.checkInterval = setInterval(async () => {
      await this.checkForAutoswitch();
    }, 5000); // V√©rifier toutes les 5 secondes
  }

  // V√©rifier si l'autoswitch doit √™tre d√©clench√©
  private async checkForAutoswitch(): Promise<void> {
    if (!this.currentSession || !this.currentSession.sessionId || this.currentSession.sessionId.trim() === '') {
      // Pas de session √† surveiller pour le moment
      return;
    }

    const sessionId = this.currentSession.sessionId.trim();

    try {
      // V√©rifier le statut de la session
      const { data: session, error } = await supabase
        .from('random_chat_sessions')
        .select('*')
        .eq('id', sessionId)
        .single();

      if (error || !session) {
        console.error('‚ùå Erreur lors de la v√©rification de session:', error);
        return;
      }

      // Si la session est en attente d'autoswitch
      if (session.status === 'autoswitch_waiting' && !this.currentSession.isActive) {
        console.log('‚è∞ Autoswitch d√©tect√©, d√©marrage du compte √† rebours');
        this.startCountdown(session.autoswitch_countdown_remaining || 30);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification d\'autoswitch:', error);
    }
  }

  // D√©marrer le compte √† rebours
  private startCountdown(initialSeconds: number): void {
    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
    }

    this.currentSession!.isActive = true;
    this.currentSession!.countdownRemaining = initialSeconds;

    console.log(`‚è∞ Compte √† rebours autoswitch d√©marr√©: ${initialSeconds} secondes`);

    this.countdownInterval = setInterval(async () => {
      if (!this.currentSession) return;

      this.currentSession.countdownRemaining--;
      
      // Notifier la mise √† jour du compte √† rebours
      if (this.onCountdownUpdate) {
        this.onCountdownUpdate(this.currentSession.countdownRemaining);
      }

      console.log(`‚è∞ Autoswitch dans: ${this.currentSession.countdownRemaining}s`);

      // Quand le compte √† rebours atteint 0
      if (this.currentSession.countdownRemaining <= 0) {
        clearInterval(this.countdownInterval!);
        this.countdownInterval = null;
        
        await this.executeAutoswitch();
      }
    }, 1000);
  }

  // Ex√©cuter l'autoswitch
  private async executeAutoswitch(): Promise<void> {
    if (!this.currentSession) return;

    console.log('üîÑ Ex√©cution de l\'autoswitch pour session:', this.currentSession.sessionId);

    try {
      // Appeler la fonction SQL pour ex√©cuter l'autoswitch
      const { data: newSessionId, error } = await supabase.rpc('execute_autoswitch', {
        p_session_id: this.currentSession.sessionId
      });

      if (error) {
        console.error('‚ùå Erreur lors de l\'autoswitch:', error);
        this.onAutoswitchComplete?.(null);
        return;
      }

      if (newSessionId) {
        console.log('‚úÖ Autoswitch r√©ussi, nouvelle session:', newSessionId);
        
        // Mettre √† jour la session courante
        this.currentSession.sessionId = newSessionId;
        this.currentSession.isActive = false;
        this.currentSession.countdownRemaining = 0;
        
        this.onAutoswitchComplete?.(newSessionId);
      } else {
        console.log('‚ùå Autoswitch √©chou√© - aucun partenaire disponible');
        this.onAutoswitchComplete?.(null);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution de l\'autoswitch:', error);
      this.onAutoswitchComplete?.(null);
    }
  }

  // Annuler l'autoswitch en cours
  cancelAutoswitch(): void {
    if (!this.currentSession?.isActive) return;

    console.log('‚ùå Annulation de l\'autoswitch');

    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
      this.countdownInterval = null;
    }

    this.currentSession.isActive = false;
    this.currentSession.countdownRemaining = 0;

    // Notifier l'annulation
    if (this.onCountdownUpdate) {
      this.onCountdownUpdate(0);
    }
  }

  // D√©clencher manuellement l'autoswitch
  async triggerManualAutoswitch(userId: string, inactivePartnerId: string): Promise<boolean> {
    if (!this.currentSession?.sessionId) return false;

    console.log('üîÑ D√©clenchement manuel de l\'autoswitch');

    try {
      const { data: success, error } = await supabase.rpc('trigger_autoswitch', {
        p_session_id: this.currentSession.sessionId,
        p_active_user_id: userId,
        p_inactive_user_id: inactivePartnerId
      });

      if (error) {
        console.error('‚ùå Erreur lors du d√©clenchement manuel:', error);
        return false;
      }

      console.log('‚úÖ Autoswitch d√©clench√© manuellement');
      return success;
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©clenchement manuel:', error);
      return false;
    }
  }

  // Obtenir le statut actuel
  getStatus(): AutoswitchSession | null {
    return this.currentSession;
  }

  // V√©rifier si l'autoswitch est actif
  isActive(): boolean {
    return this.currentSession?.isActive || false;
  }

  // Obtenir le temps restant
  getTimeRemaining(): number {
    return this.currentSession?.countdownRemaining || 0;
  }

  // Nettoyer les ressources
  cleanup(): void {
    console.log('üßπ Nettoyage du gestionnaire d\'autoswitch');

    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
      this.countdownInterval = null;
    }

    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }

    this.currentSession = null;
    this.onCountdownUpdate = null;
    this.onAutoswitchComplete = null;
  }
}

export default AutoswitchManager;